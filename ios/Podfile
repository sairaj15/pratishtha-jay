# Uncomment this line to define a global platform for your project
platform :ios, '12.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!
  use_modular_headers!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

post_install do |installer|
  # Process all pod targets first.
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
    target.build_configurations.each do |config|
      # Force deployment target
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '12.0'
      
      # For the specific BoringSSL-GRPC target, remove any -G flag more aggressively.
      if target.name.include?("BoringSSL-GRPC")
        if config.build_settings['OTHER_LDFLAGS']
          if config.build_settings['OTHER_LDFLAGS'].is_a?(Array)
            config.build_settings['OTHER_LDFLAGS'].reject! { |flag| flag.include?("-G") }
          elsif config.build_settings['OTHER_LDFLAGS'].is_a?(String)
            config.build_settings['OTHER_LDFLAGS'] = config.build_settings['OTHER_LDFLAGS'].gsub(/-G\S*/, '')
          end
        end
      end

      # For all targets, scrub the common keys.
      ['OTHER_LDFLAGS', 'OTHER_CFLAGS', 'OTHER_SWIFT_FLAGS'].each do |flag|
        if config.build_settings[flag]
          if config.build_settings[flag].is_a?(Array)
            config.build_settings[flag].reject! { |f| f.include?("-G") }
          elsif config.build_settings[flag].is_a?(String)
            config.build_settings[flag] = config.build_settings[flag].gsub(/-G\S*/, '')
          end
        end
      end
    end
  end

  # Now process aggregate targets (like the Runner project)
  installer.aggregate_targets.each do |target|
    target.user_project.build_configurations.each do |config|
      ['OTHER_LDFLAGS', 'OTHER_CFLAGS', 'OTHER_SWIFT_FLAGS'].each do |flag|
        if config.build_settings[flag]
          if config.build_settings[flag].is_a?(Array)
            config.build_settings[flag].reject! { |f| f.include?("-G") }
          elsif config.build_settings[flag].is_a?(String)
            config.build_settings[flag] = config.build_settings[flag].gsub(/-G\S*/, '')
          end
        end
      end
    end
  end
end